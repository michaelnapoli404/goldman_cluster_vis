# Wave Visualizer - Technical Documentation

> Comprehensive Python package for longitudinal survey data visualization and analysis

## Table of Contents

1. [Overview](#overview)
2. [Installation & Setup](#installation--setup)
3. [No-Code Usage](#no-code-usage)
4. [API Reference](#api-reference)
5. [Visualization Types](#visualization-types)
6. [Configuration System](#configuration-system)
7. [Data Processing Pipeline](#data-processing-pipeline)
8. [Export System](#export-system)
9. [Development Guide](#development-guide)
10. [Architecture Details](#architecture-details)

## Overview

Wave Visualizer is a professional-grade Python package designed for analyzing longitudinal survey data, particularly in political science research. It provides sophisticated visualization tools for tracking how respondents' answers change across multiple survey waves.

### Key Features

- **Three Visualization Types**: Alluvial plots, heatmaps, and pattern analysis
- **Automatic Wave Detection**: Support for unlimited survey waves (W1, W2, W3, etc.)
- **No-Code Solution**: Complete launcher scripts with automatic conda installation
- **Professional Export**: HTML + high-resolution image export
- **Semantic Color Mapping**: Consistent, meaningful color assignments
- **Comprehensive Data Pipeline**: Automated cleaning and preprocessing
- **Type-Safe APIs**: Full type hints and IDE support

### Recent Major Updates

- **Fixed Alluvial Structure**: Separate nodes for each wave instead of shared categories
- **Enhanced Heatmaps**: Percentage-based matrices with red colorscale matching user preferences
- **Improved Pattern Analysis**: Horizontal bar charts with green/orange color coding for stable/changed patterns
- **Automatic Installation**: No-code launchers now automatically install conda if needed
- **Simplified Export Paths**: Automatic detection of example_visualizations directory

## Installation & Setup

### Method 1: No-Code Installation (Recommended for Non-Programmers)

1. Download the project ZIP file from GitHub
2. Extract to your computer
3. Double-click the appropriate launcher:
   - **Windows**: `no_code/run_examples.bat`
   - **Mac/Linux**: `no_code/run_examples.sh`

The launcher will automatically:
- Install conda (if needed)
- Set up the Python environment
- Generate all example visualizations
- Save results as HTML + PNG files

### Method 2: Developer Installation

```bash
# Clone repository
git clone https://github.com/michaelnapoli404/wave-visualizer.git
cd wave-visualizer

# Install with image export capabilities
pip install -e ".[image-export]"

# Or install with development tools
pip install -e ".[dev,test]"
```

### Environment Setup

The package uses conda for environment management:

```bash
# Create environment from environment.yml
conda env create -f environment.yml

# Activate environment
conda activate goldman_env

# Install package in development mode
pip install -e .
```

## No-Code Usage

The no-code solution is designed for researchers who want professional visualizations without programming.

### Features

- **Zero Setup**: Automatic conda installation and environment setup
- **One-Click Generation**: Run all examples with a single double-click
- **Professional Output**: HTML + PNG exports for presentations
- **Easy Customization**: Edit Python files intuitively to change analysis parameters

### Generated Visualizations

Each run creates 9 professional visualizations (3 per political party):

**Democratic Voters:**
- `democrat_alluvial_w1_w3.html/.png` - Flow diagram of transitions
- `democrat_heatmap_w1_w3.html/.png` - Percentage transition matrix
- `democrat_patterns_w1_w3.html/.png` - Ranked transition patterns

**Republican Voters:**
- `republican_alluvial_w1_w3.html/.png`
- `republican_heatmap_w1_w3.html/.png`
- `republican_patterns_w1_w3.html/.png`

**Independent Voters:**
- `independent_alluvial_w1_w3.html/.png`
- `independent_heatmap_w1_w3.html/.png`
- `independent_patterns_w1_w3.html/.png`

### Customization Without Coding

Edit `example_visualizations/political_w1_w3.py`:

```python
# Change the political party filter
filter_value='Independent'  # Change to: 'Democrat', 'Republican', etc.

# Change the wave transition
wave_config='w1_to_w2'     # Change to: 'w1_to_w3', 'w2_to_w3', etc.

# Change the variable being analyzed
variable_name='NewVariable_labeled'  # Change to any wave-prefixed variable
```

## API Reference

### Main Visualization Functions

#### `create_alluvial_visualization()`

Creates Sankey diagrams showing transitions between categories across waves.

```python
wave_visualizer.create_alluvial_visualization(
    variable_name='HFClust_labeled',    # Variable to analyze
    wave_config='w1_to_w3',             # Wave transition configuration
    filter_column='PID1_labeled',       # Optional: Column to filter by
    filter_value='Republican',          # Optional: Value to filter for
    data=None,                          # Optional: Custom dataset
    show_plot=True                      # Whether to display plot
) -> Tuple[go.Figure, Dict[str, Any]]
```

**Returns**: Tuple of (Plotly Figure, Statistics Dictionary)

**New Features**:
- Separate nodes for each wave (e.g., "Flourishing (W1)" vs "Flourishing (W3)")
- Proper left-right flow layout
- Automatic positioning with `arrangement="snap"`

#### `create_heatmap_visualization()`

Creates percentage-based transition matrices with color intensity.

```python
wave_visualizer.create_heatmap_visualization(
    variable_name='HFClust_labeled',
    wave_config='w1_to_w3',
    filter_column='PID1_labeled',
    filter_value='Democrat',
    data=None,
    show_plot=True
) -> Tuple[go.Figure, Dict[str, Any]]
```

**Updated Features**:
- Red colorscale (`colorscale='Reds'`)
- Percentage values displayed on cells (`texttemplate="%{text:.1f}%"`)
- 600x800 dimensions for consistency
- Row-wise percentage normalization

#### `create_pattern_analysis_visualization()`

Creates horizontal bar charts showing ranked transition patterns.

```python
wave_visualizer.create_pattern_analysis_visualization(
    variable_name='HFClust_labeled',
    wave_config='w1_to_w3',
    filter_column='PID1_labeled',
    filter_value='Independent',
    data=None,
    show_plot=True
) -> Tuple[go.Figure, Dict[str, Any]]
```

**Updated Features**:
- Horizontal bar orientation
- Green bars for stable patterns (#2E8B57)
- Orange bars for change patterns (#FF8C00)
- Top 15 patterns displayed
- Count and percentage labels outside bars

### Export Functions

#### `export_figure()`

Exports visualizations to multiple formats with automatic path detection.

```python
wave_visualizer.export_figure(
    fig,                                # Plotly Figure object
    filename,                          # Base filename (no extension)
    formats=['html', 'png']            # List of export formats
) -> Dict[str, str]
```

**Supported Formats**: 'html', 'png', 'svg', 'pdf'

**Auto-Detection**: Automatically detects if called from `example_visualizations/` and exports to the correct location.

## Visualization Types

### 1. Alluvial Plots (Sankey Diagrams)

**Purpose**: Show flow of respondents between categories across waves

**Key Features**:
- Separate nodes for each wave
- Flow thickness represents count
- Color-coded by source category
- Interactive hover information

**Best For**: Understanding overall transition patterns and flow directions

### 2. Heatmaps

**Purpose**: Display transition probabilities as color intensity matrices

**Key Features**:
- Percentage-based values
- Red colorscale for intensity
- Row-wise normalization
- Diagonal shows stability

**Best For**: Quantitative analysis of transition probabilities

### 3. Pattern Analysis

**Purpose**: Rank most common transition patterns

**Key Features**:
- Horizontal bar layout
- Color-coded by pattern type
- Top 15 patterns shown
- Count and percentage labels

**Best For**: Identifying specific transition patterns and their frequency

## Configuration System

### Wave Configuration

The package uses a flexible wave configuration system:

```python
# Supported wave configs
'w1_to_w2'    # Wave 1 to Wave 2
'w1_to_w3'    # Wave 1 to Wave 3 (skipping Wave 2)
'w2_to_w3'    # Wave 2 to Wave 3
# Add more as needed
```

### Color Mapping

Semantic color mapping ensures consistency across visualizations:

```python
# Default color mappings for HFClust_labeled
{
    'Suffering': '#8B0000',      # Dark red
    'Searching': '#FF6B6B',      # Light red  
    'Resilient': '#4CAF50',      # Green
    'Flourishing': '#2E7D32'     # Dark green
}
```

### Plot Parameters

Configurable visual parameters:

```python
plot_params = {
    'figure_width': 1200,
    'figure_height': 800,
    'title_size': 20,
    'label_size': 12,
    'node_padding': 15,
    'node_thickness': 20,
    'margin_left': 100,
    'margin_right': 100,
    'margin_top': 100,
    'margin_bottom': 50
}
```

## Data Processing Pipeline

### Input Requirements

- **SPSS Files**: .sav format with labeled variables
- **Wave-Prefixed Columns**: Variables named like `W1_variable`, `W2_variable`
- **Categorical Data**: Labeled categorical variables for meaningful visualization

### Processing Steps

1. **Data Loading**: Read SPSS files with `pyreadstat`
2. **Column Validation**: Verify wave-prefixed columns exist
3. **Data Cleaning**: Handle missing values and inconsistencies
4. **Filtering**: Apply optional row/column filters
5. **Transition Creation**: Generate transition matrices
6. **Visualization**: Create plots with appropriate styling

### Filtering System

```python
# Example filtering
settings = {
    "filters": [{
        "column": "PID1_labeled",
        "values": ["Democrat", "Republican"]
    }]
}
```

## Export System

### Automatic Path Detection

The export system automatically detects the calling context:

```python
# If called from example_visualizations/script.py
exports_to = "example_visualizations/exports/"

# If called from project root
exports_to = "exports/"
```

### Export Formats

- **HTML**: Interactive Plotly visualizations
- **PNG**: High-resolution static images (1200x800, scale=2)
- **SVG**: Vector graphics for publications
- **PDF**: Print-ready documents

### File Organization

```
example_visualizations/exports/
├── democrat_alluvial_w1_w3.html
├── democrat_alluvial_w1_w3.png
├── democrat_heatmap_w1_w3.html
├── democrat_heatmap_w1_w3.png
├── democrat_patterns_w1_w3.html
├── democrat_patterns_w1_w3.png
└── ... (repeat for republican/independent)
```

## Development Guide

### Code Quality Standards

- **Type Hints**: All functions have complete type annotations
- **Docstrings**: Google-style docstrings for all public APIs
- **Logging**: Comprehensive logging with configurable levels
- **Error Handling**: Custom exception hierarchy
- **Testing**: Unit and integration tests with pytest

### Development Setup

```bash
# Install development dependencies
pip install -e ".[dev,test]"

# Run code formatting
make format

# Run all quality checks
make all-checks

# Run tests with coverage
make test
```

### Pre-commit Hooks

```bash
# Install pre-commit hooks
pre-commit install

# Run hooks manually
pre-commit run --all-files
```

### Testing

```bash
# Run all tests
pytest

# Run with coverage
pytest --cov=wave_visualizer

# Run specific test categories
pytest -m unit
pytest -m integration
```

## Architecture Details

### Package Structure

```
wave_visualizer/
├── __init__.py                      # Main package interface
├── config.py                       # Configuration management
├── exceptions.py                    # Custom exception hierarchy
├── validators.py                    # Input validation
├── interfaces.py                    # Abstract base classes
├── data_prep/                       # Data processing
│   ├── cleaning/                   # Data cleaning modules
│   ├── customization.py           # Color and style config
│   ├── export_handler.py          # Export functionality
│   └── wave_parser.py             # Wave configuration parsing
├── visualization_techs/             # Visualization generators
│   ├── alluvial_plots.py          # Alluvial/Sankey diagrams
│   ├── alluvial_builder.py        # Builder pattern implementation
│   ├── heatmaps.py                # Transition heatmaps
│   └── transition_pattern_analysis.py # Pattern bar charts
├── utils/                          # Utilities
│   └── logger.py                  # Logging system
└── settings/                       # Configuration files
    ├── processed_data.csv         # Cleaned dataset
    ├── wave_definitions.csv       # Wave configurations
    └── color_mappings.csv         # Color schemes
```

### Design Patterns

- **Builder Pattern**: `AlluvialVisualizationBuilder` for complex visualization construction
- **Strategy Pattern**: Data cleaning operations
- **Factory Pattern**: Visualization and data handler creation
- **Observer Pattern**: Progress monitoring
- **Command Pattern**: Undoable data transformations

### Dependencies

#### Core Dependencies
- `pandas >= 1.3.0` - Data manipulation
- `plotly >= 5.0.0` - Interactive visualizations
- `numpy >= 1.20.0` - Numerical operations
- `pyreadstat >= 1.1.0` - SPSS file reading

#### Optional Dependencies
- `kaleido >= 0.2.1` - Image export
- `black >= 22.0.0` - Code formatting
- `mypy >= 0.950` - Type checking
- `pytest >= 7.0.0` - Testing framework

### Performance Considerations

- **Lazy Loading**: Data loaded only when needed
- **Caching**: Processed data cached for repeated use
- **Memory Management**: Efficient handling of large datasets
- **Export Optimization**: Parallel export for multiple formats

## Troubleshooting

### Common Issues

1. **conda not found**
   - Solution: Use automatic installation in no-code launcher

2. **Module import errors**
   - Solution: Ensure package installed with `pip install -e .`

3. **Export path issues**
   - Solution: Updated export handler automatically detects correct paths

4. **Visualization display issues**
   - Solution: Use `show_plot=False` and rely on export functionality

### Support

- **GitHub Issues**: Report bugs and feature requests
- **Documentation**: This file and inline docstrings
- **Examples**: Complete working examples in `example_visualizations/`

## License

MIT License - see LICENSE file for details.

## Changelog

### Version 0.1.0 (Current)

**Major Features:**
- Complete package restructure with professional architecture
- Fixed alluvial plots with separate wave nodes
- Enhanced heatmaps with percentage-based matrices
- Improved pattern analysis with horizontal bars
- No-code solution with automatic conda installation
- Comprehensive export system with auto-path detection
- Type-safe APIs with full IDE support

**Technical Improvements:**
- Builder pattern for alluvial visualizations
- Centralized logging system
- Custom exception hierarchy
- Comprehensive input validation
- Professional code quality standards
- Complete test suite coverage 